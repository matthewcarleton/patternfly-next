// Don't remove this magic comment. See gulpfile.js.
// @import "../../sass-utilities/all";

// URL.com/guidelines#layout
// Generate smart grid layout
// @parameter {Suffix} xs, sm, md, lg, xl, null
@mixin pf-smart-grid($suffix: null) {
  @for $col-num from 1 through 12 {
    &.pf-m-all-#{$col-num}-col#{$suffix} {
      > * {
        --pf-l-grid__item--GridColumnEnd: span #{$col-num};
      }
    }
  }
}

// Creates grid item
// @parameter {Suffix} xs, sm, md, lg, xl, null
@mixin pf-grid-item-modifier($suffix: null) {
  // generate column span modifier
  @for $col-num from 1 through 12 {
    > .pf-m-#{$col-num}-col#{$suffix} {
      --pf-l-grid__item--GridColumnEnd: span #{$col-num};
    }
  }

  // generate column offset modfiers
  @for $col-num from 1 through 12 {
    > .pf-m-offset-#{$col-num}-col#{$suffix} {
      --pf-l-grid__item--GridColumnStart: col-start calc(#{$col-num} + 1);
    }
  }

  // generate row span modfiers
  @for $row-num from 1 through 12 {
    > .pf-m-#{$row-num}-row#{$suffix} {
      grid-row: span #{$row-num};
    }
  }
}


// Grid base
.pf-l-grid {
  --pf-l-grid--m-gutter--GridGap: var(--pf-global--gutter);
  --pf-l-grid--m-gutter--md--GridGap: var(--pf-global--gutter--md);
  --pf-l-grid__item--GridColumnStart: auto;
  --pf-l-grid__item--GridColumnEnd: span 12;

  @media screen and (max-width: $pf-global--breakpoint--md) {
    --pf-l-grid--m-gutter--GridGap: var(--pf-l-grid--m-gutter--md--GridGap);
  }

  display: grid;
  grid-template-columns: repeat(12, [col-start] 1fr);

  > *,
  .pf-l-grid__item {
    grid-column-start: var(--pf-l-grid__item--GridColumnStart);
    grid-column-end: var(--pf-l-grid__item--GridColumnEnd);
    min-width: 0;
    min-height: 0;
  }

  // Loop through $breakpoints map to generate responsive classes
  @each $breakpoint, $value in $pf-global--breakpoint-map {
    @include pf-media-query($breakpoint) {
      @include pf-smart-grid($value);
    }
  }

  // Loop through $breakpoints map to generate responsive classes
  @each $breakpoint, $value in $pf-global--breakpoint-map {
    @include pf-media-query($breakpoint) {
      @include pf-grid-item-modifier($value);
    }
  }

  @each $breakpoint, $value in $pf-global--breakpoint-map {
    @include pf-media-query($breakpoint) {
      &.pf-m-gutter#{$value} {
        grid-gap: var(--pf-l-grid--m-gutter--GridGap);
      }

      &.pf-m-gutter-rows#{$value} {
        grid-row-gap: var(--pf-l-grid--m-gutter--GridGap);
      }

      &.pf-m-gutter-columns#{$value} {
        grid-column-gap: var(--pf-l-grid--m-gutter--GridGap);
      }

      // justify-items
      &.pf-m-justify-items-start#{$value} {
        justify-items: start;
      }

      &.pf-m-justify-items-center#{$value} {
        justify-items: center;
      }

      &.pf-m-justify-items-end#{$value} {
        justify-items: end;
      }

      &.pf-m-justify-items-stretch#{$value} {
        justify-items: stretch;
      }

      // align-items
      &.pf-m-align-items-start#{$value} {
        align-items: start;
      }

      &.pf-m-align-items-center#{$value} {
        align-items: center;
      }

      &.pf-m-align-items-end#{$value} {
        align-items: end;
      }

      &.pf-m-align-items-stretch#{$value} {
        align-items: stretch;
      }

      // align-content
      &.pf-m-align-content-start#{$value} {
        align-content: start;
      }

      &.pf-m-align-content-center#{$value} {
        align-content: center;
      }

      &.pf-m-align-content-end#{$value} {
        align-content: end;
      }

      &.pf-m-align-content-stretch#{$value} {
        align-content: stretch;
      }

      &.pf-m-align-content-space-around#{$value} {
        align-content: space-around;
      }

      &.pf-m-align-content-space-between#{$value} {
        align-content: space-between;
      }

      &.pf-m-align-content-space-evenly#{$value} {
        align-content: space-evenly;
      }

      // justify-self
      > .pf-m-justify-self-start#{$value} {
        justify-self: start;
      }

      > .pf-m-justify-self-center#{$value} {
        justify-self: center;
      }

      > .pf-m-justify-self-end#{$value} {
        justify-self: end;
      }

      > .pf-m-justify-self-stretch#{$value} {
        justify-self: stretch;
      }

      // align-self
      > .pf-m-align-self-start#{$value} {
        align-self: start;
      }

      > .pf-m-align-self-center#{$value} {
        align-self: center;
      }

      > .pf-m-align-self-end#{$value} {
        align-self: end;
      }

      > .pf-m-align-self-stretch#{$value} {
        align-self: stretch;
      }
    }
  }
}
